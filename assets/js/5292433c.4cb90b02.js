"use strict";(self.webpackChunk_8x8_developer_docs=self.webpackChunk_8x8_developer_docs||[]).push([[12658],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},29797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"actions-events/docs/validating-webhook-events","title":"Validating Webhook Events","description":"The Webhook events HTTP POST requests have custom headers containing the digital signature of the event that enable you to establish:","source":"@site/docs/actions-events/docs/validating-webhook-events.md","sourceDirName":"actions-events/docs","slug":"/actions-events/docs/validating-webhook-events","permalink":"/actions-events/docs/validating-webhook-events","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebarActionsEventsDocs","previous":{"title":"Webhooks Events Reference","permalink":"/actions-events/docs/webhooks-events-reference"},"next":{"title":"Channel","permalink":"/actions-events/docs/channel"}}');var r=t(74848),i=t(28453);const a={},o="Validating Webhook Events",d={},c=[{value:"Custom HTTP headers",id:"custom-http-headers",level:2},{value:"Signature",id:"signature",level:2},{value:"JOSE Header",id:"jose-header",level:4},{value:"Data to be signed",id:"data-to-be-signed",level:4},{value:"Signature validation",id:"signature-validation",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"validating-webhook-events",children:"Validating Webhook Events"})}),"\n",(0,r.jsxs)(n.p,{children:["The Webhook events HTTP ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"POST"})})," requests have custom headers containing the digital signature of the event that enable you to establish:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Integrity"}),"\n",(0,r.jsx)(n.li,{children:"Confidentiality"}),"\n",(0,r.jsx)(n.li,{children:"Idempotency"}),"\n",(0,r.jsx)(n.li,{children:"Non-repudiation"}),"\n",(0,r.jsx)(n.li,{children:"Authentication"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"for the event."}),"\n",(0,r.jsx)(n.h2,{id:"custom-http-headers",children:"Custom HTTP headers"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Header"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-tenant-id"})})}),(0,r.jsxs)(n.td,{children:["Contains your tenant ID ",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{})," This information matches the information in ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.8x8.com/8x8WebHelp/VCC/configuration-manager-general/content/cfgoverview.htm",children:"Configuration Manager"})})," ",(0,r.jsx)(n.strong,{children:"> Home > Profile > Tenant Label"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-event-id"})})}),(0,r.jsx)(n.td,{children:"The unique ID that is used to determine that the event notification you received is distinct from previous ones."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-signature"})})}),(0,r.jsxs)(n.td,{children:["The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#signature",children:"digital signature"})})," which enables you to establish identity and confirms that the message has not been compromised. ",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"If the signature is not valid, the message can be dropped. ",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"See ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#signature",children:"signature"})})," for validation information."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-transmission-time"})})}),(0,r.jsxs)(n.td,{children:["The header for the request timestamp. ",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{})," This is different from the event timestamp that you may receive in the payload. If you are not able to confirm the event with a 2XX code, then 8x8 will retry the event after a brief delay. The transmission time changes at each retry."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-retry"})})}),(0,r.jsx)(n.td,{children:"Indicates the retry attempt for the same event."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"x-8x8-customer-id"})})}),(0,r.jsx)(n.td,{children:"The unique customer ID."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,r.jsx)(n.p,{children:"The JSON Web Signature (JWS) with detached content and an unencoded payload."}),"\n",(0,r.jsxs)(n.p,{children:["The JWS is as specified according to ",(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7515",children:"RFC 7515"})," which consists of:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#jose-header",children:"JOSE Header"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#data-to-be-signed",children:"Data to be Signed"})," (not present if detached)"]}),"\n",(0,r.jsx)(n.li,{children:"The JWS signature value"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"jose-header",children:"JOSE Header"}),"\n",(0,r.jsx)(n.p,{children:"The JOSE Header describes the cryptographic operations applied to JWS."}),"\n",(0,r.jsx)(n.p,{children:"The Chat API signature consists of:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"alg"})}),": The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"alg"})})," (algorithm) header parameter identifies the cryptographic algorithm used to secure JWS (",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.1",children:"RFC 7515 Section 4.1.1"})}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"kid"})}),": The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"kid"})})," (key ID) header parameter is a hint indicating which key was used to secure JWS (",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.4",children:"RFC 7515 Section 4.1.4"})}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"kid"})})," is the ID of the keys resource used to sign JWS"]}),"\n",(0,r.jsxs)(n.p,{children:["You can use this kid to fetch the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/actions-events/reference/getjwkpublickey-1",children:"public key"})})," and use it to validate JWS"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"b64"})}),": The ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"b64"})})," header parameter stores password hashes computed with encoding ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7797#section-3",children:"RFC 7797 Section 3"})}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Because the payload is not encoded, this value is ",(0,r.jsx)(n.strong,{children:"false"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"crit"}),": the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"crit"})})," (Critical) header parameter ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.11",children:"RFC 7515 Section 4.1.11"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This list contains ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"b64"})})," encoding. ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7797#section-6",children:"RFC 7797 Section 6"})})]}),"\n",(0,r.jsx)(n.h4,{id:"data-to-be-signed",children:"Data to be signed"}),"\n",(0,r.jsx)(n.p,{children:"The unencoded detached payload is in JSON format containing the following properties:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"checksum"})})," ",(0,r.jsx)(n.br,{}),"long"]}),(0,r.jsxs)(n.td,{children:["The checksum of the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"POST"})})," payload.",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"You must:",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"- Serialize the byte array with UTF-8 encoding",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"- Compute the CRC32 checksum of the encoded body",(0,r.jsx)(n.br,{}),(0,r.jsx)(n.br,{}),"The CRC32 checksum value should be expressed in decimal format."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tt"})})," ",(0,r.jsx)(n.br,{}),"long"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Transmission Time"})," - this value can be obtained from the ",(0,r.jsx)(n.strong,{children:"x-8x8-transmission-time"})," header"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cid"})})," ",(0,r.jsx)(n.br,{}),"string"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Customer ID"})," - this value can be obtained from the ",(0,r.jsx)(n.strong,{children:"x-8x8-customer-id"})," header"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tid"})})," ",(0,r.jsx)(n.br,{}),"string"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Tenant ID"})," - this value can be obtained from the ",(0,r.jsx)(n.strong,{children:"x-8x8-tenant-id"})," header"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"eid"})})," ",(0,r.jsx)(n.br,{}),"string"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Event ID"})," - this value can be fetched from the ",(0,r.jsx)(n.strong,{children:"x-8x8-event-id"})," header"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"retry"})})," ",(0,r.jsx)(n.br,{}),"long"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Retry attempt"})," - this value can be fetched from the ",(0,r.jsx)(n.strong,{children:"x-8x8-retry"})," header"]})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcd8 ",(0,r.jsx)(n.strong,{children:"Note:"})]}),"\n",(0,r.jsx)(n.p,{children:"Since a signature is computed for this payload, the order of keys is of critical importance. Review and adhere to the following order."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The keys are lexicographically ordered as follows:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"checksum"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cid"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"eid"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"retry"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tid"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tt"})})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "checksum": 1411811814,\n  "cid": "vccC8ProdChecksUS",\n  "eid": "g4nqGuj8TpCa6tiZ3DeeNw",\n  "retry": 0,\n  "tid": "vccC8ProdChecksUS",\n  "tt": 1629804577296\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"The request should resemble the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl --request POST \\\n  --url http://your-webhook-domain-url/callback \\\n  --header \'cache-control: no-cache\' \\\n  --header \'content-type: application/json\' \\\n  --header \'x-8x8-customer-id: vccC8ProdChecksUS\' \\\n  --header \'x-8x8-event-id: g4nqGuj8TpCa6tiZ3DeeNw\' \\\n  --header \'x-8x8-retry: 0\' \\\n  --header \'x-8x8-signature: eyJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCJdLCJraWQiOiJrZXkxIiwiYWxnIjoiUlMyNTYifQ..O4kXJAvWFtxYZERsJX-OkGLYL__7-rtQrm6y9MFwaISGw1timf1QDQpXy6-8095M67-eN-rUQDNwalktIdHs--DBpR-ratQd1bDlrPMR5CGlsbLFso-KziuqJycBBYmpLIs0JhFihTfoBstduRsQyK-oX0bAu1ZytTVLgmzPkAptlczoS7hsQHfH2QMH8LoEZk99wKqCNczsnu8bfJllSiMXxzZqYa_ll7i-Wy1myjzdvMArtSggbxqsSdbNRmSQgT6KDbWriJD7ucsEDwuKVe-q9cQMEMU2tO9aeyDbCMFo-FKXPUPzQ5J8xkQU8nn3tNurKVBB8x_8YJ8s0EKg3g\' \\\n  --header \'x-8x8-tenant-id: vccC8ProdChecksUS\' \\\n  --header \'x-8x8-transmission-time: 1629804577296\' \\\n  --data \'{"eventType":"AGENT_JOINED","messageType":"SYSTEM","conversationId":"Aka5NMHU8MtIG7lUQOxI0DTOvM4","agentId":"cmalutan","agentName":"Cosmin,Malutan","timestamp":1629804577002}\'\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"signature-validation",children:"Signature validation"}),"\n",(0,r.jsx)(n.p,{children:"To validate a signature:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Obtain the request payload and compute the CRC32 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"checksum"})})," value for it."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"checksum"})})," should be presented in decimal format.\n2. Extract all of the critical HTTP headers described in ",(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#custom-http-headers",children:(0,r.jsx)(n.strong,{children:"list of custom HTTP headers"})}),"\n3. Reconstruct the detached payload of the JWS signature as shown in section ",(0,r.jsx)(n.a,{href:"/actions-events/docs/validating-webhook-events#data-to-be-signed",children:"data to be signed"})]}),"\n",(0,r.jsxs)(n.p,{children:["This UTF8 encoded JSON will be your ",(0,r.jsx)(n.strong,{children:"JWS Payload"}),"\n4. Construct JWS Signing Input"]}),"\n",(0,r.jsxs)(n.p,{children:["ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || (JWS Payload))\n5. Obtain the public key ID from the JOSE Header\n6. Obtain the public key in JWK format from the ",(0,r.jsx)(n.a,{href:"/actions-events/reference/getjwkpublickey-1",children:"public key API"}),"\n7. Validate the ",(0,r.jsx)(n.strong,{children:"JWS Signature"})," against the ",(0,r.jsx)(n.strong,{children:"JWS Signing Input"})," using the RS256 algorithm and the obtained key"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'<?php\n/*\n In the following example we use the following mvn packages:\n\n  - group: com.nimbusds\n    artifact: nimbus-jose-jwt\n    version: 9.9.3\n  - group: com.google.code.gson\n    artifact: gson\n    version: 2.8.7\n  - group: org.springframework\n    artifact: spring-web\n    version: 5.1.2.RELEASE\n*/\n\npackage com.example.controller;\n\nimport com.google.gson.JsonObject;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.JWSObject;\nimport com.nimbusds.jose.JWSVerifier;\nimport com.nimbusds.jose.Payload;\nimport com.nimbusds.jose.crypto.RSASSAVerifier;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.text.ParseException;\nimport java.util.Map;\nimport java.util.zip.CRC32;\n\n@RestController\n@RequestMapping("/callback")\npublic class MessageWebhookController {\n    private static final String KEY_URL = "https://api.8x8.com/vcc/us/chat/v2/jwk/{keyID}/public";\n    private static final RestTemplate restTemplate = new RestTemplate();\n\n    @PostMapping\n    public ResponseEntity<Void> webhook(@RequestBody String body, @RequestHeader Map<String, String> headers) {\n        final byte[] content = body.getBytes();\n\n        final String signature = headers.get("x-8x8-signature");\n        final String customerId = headers.get("x-8x8-customer-id");\n        final String tenantId = headers.get("x-8x8-tenant-id");\n        final String eventId = headers.get("x-8x8-event-id");\n        final String transmissionTime = headers.get("x-8x8-transmission-time");\n        final String retry = headers.get("x-8x8-retry");\n\n        final CRC32 crc32 = new CRC32();\n        crc32.update(content);\n        final long checksum = crc32.getValue();\n\n        final JsonObject json = new JsonObject();\n        json.addProperty("checksum", checksum);\n        json.addProperty("cid", customerId);\n        json.addProperty("eid", eventId);\n        json.addProperty("retry", Long.valueOf(retry));\n        json.addProperty("tid", tenantId);\n        json.addProperty("tt", Long.valueOf(transmissionTime));\n\n        final String signaturePayload = json.toString();\n        final Payload payload = new Payload(signaturePayload);\n        try {\n            final JWSObject jwsObject = JWSObject.parse(\n                    signature,\n                    payload\n            );\n            final String keyID = jwsObject.getHeader().getKeyID();\n            final ResponseEntity<String> entity = restTemplate.getForEntity(KEY_URL, String.class, keyID);\n            final RSAKey publicJWK = RSAKey.parse(entity.getBody());\n\n            JWSVerifier verifier = new RSASSAVerifier(publicJWK);\n            if (jwsObject.verify(verifier)) {\n                return ResponseEntity.ok().build();\n            } else {\n                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n            }\n        } catch (ParseException | JOSEException e) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'<?php\n/*\n In this example we use the following composer modules: \n   - web-token/jwt-core                    ^2.1\n   - web-token/jwt-signature               ^2.1\n   - web-token/jwt-signature-algorithm-rsa ^2.1\n */\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Signature\\Algorithm\\RS256;\nuse Jose\\Component\\Signature\\JWSVerifier;\nuse Jose\\Component\\Signature\\Serializer\\JWSSerializerManager;\nuse Jose\\Component\\Signature\\Serializer\\CompactSerializer;\n\n$algorithmManager = new AlgorithmManager([\n    new RS256(),\n]);\n\n// The serializer manager. We only use the JWS Compact Serialization Mode.\n$serializerManager = new JWSSerializerManager([\n    new CompactSerializer(),\n]);\n\n// We instantiate our JWS Verifier.\n$jwsVerifier = new JWSVerifier($algorithmManager);\n\n$headers = getallheaders();\n$raw_post_data = file_get_contents(\'php://input\');\n$header_signature = $headers[\'X-8x8-Signature\'];\n$header_customerId = $headers[\'X-8x8-Customer-Id\'];\n$header_tenantId = $headers[\'X-8x8-Tenant-Id\'];\n$header_eventId = $headers[\'X-8x8-Event-Id\'];\n$header_transmissionTime = $headers[\'X-8x8-Transmission-Time\'];\n$header_retry = $headers[\'X-8x8-Retry\'];\n\n$checksum = sprintf("%u", crc32( $raw_post_data ));\n\n// We try to load the token.\n$jws = $serializerManager->unserialize($header_signature);\n$payload = json_encode([\n    "checksum" => intval($checksum),\n    "cid" => $header_customerId,\n    "eid" => $header_eventId,\n    "retry" => intval($header_retry),\n    "tid" => $header_tenantId,\n    "tt" => intval($header_transmissionTime)\n]);\n\n$keyID= $jws->getSignature(0)->getProtectedHeader()["kid"];\n\n$ch = curl_init(sprintf("https://api.8x8.com/vcc/us/chat/v2/jwk/%s/public", $keyID));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n$data = curl_exec($ch);\ncurl_close($ch);\n\n$jwk = JWK::createFromJson($data);\n\n$isVerified = $jwsVerifier->verifyWithKey($jws, $jwk, 0, $payload);\n\nif (!$isVerified) {\n    header("HTTP/1.1 401 Unauthorized");\n    exit;\n}\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/*\n In the following example we use the following npm packages:\n    jshashes: ^1.0.8\n    fastify: ^4.9.2\n    jose: ^4.10.4,\n    node-fetch: ^3.2.10\n*/\nimport * as Hashes from \"jshashes\"\nimport fastify from 'fastify';\nimport { errors, flattenedVerify, importJWK, decodeProtectedHeader } from 'jose';\nimport fetch from 'node-fetch';\nconst UNAUTHORIZED = 401;\nconst INTERNAL_SERVER_ERROR = 500;\nconst getPublicKey = async(keyId) => {\n  const keyUrl = `https://api.8x8.com/vcc/us/chat/v2/jwk/${keyId}/public`;\n  const response = await fetch(keyUrl);\n  const data = await response.json();\n  return importJWK(data, 'RS256');\n};\nconst getJwsParts = (token) => {\n  const parts = token.split('.');\n  if (parts.length === 3 || parts.length === 5) {\n    const [protectedHeaderBase64, , signatureBase64] = parts;\n    return {\n      signatureBase64,\n      protectedHeaderBase64\n    };\n  }\n  throw new Error(`Invalid token ${token}`);\n};\nconst app = Fastify();\napp.post('/callback', async(request, reply) => {\n  const { headers, body } = request;\n  const checksum = Hashes.CRC32(JSON.stringify(body));\n  const signature = headers['x-8x8-signature'];\n  const customerId = headers['x-8x8-customer-id'];\n  const tenantId = headers['x-8x8-tenant-id'];\n  const eventId = headers['x-8x8-event-id'];\n  const transmissionTime = headers['x-8x8-transmission-time'];\n  const retry = headers['x-8x8-retry'];\n  const signaturePayload = {\n    checksum,\n    cid: customerId,\n    eid: eventId,\n    retry: parseInt(retry, 10),\n    tid: tenantId,\n    tt: parseInt(transmissionTime, 10),\n  };\n  try {\n    const { signatureBase64, protectedHeaderBase64 } = getJwsParts(signature);\n    const protectedHeader = decodeProtectedHeader(signature);\n    const publicKey = await getPublicKey(protectedHeader.kid);\n    const jws = {\n      signature: signatureBase64,\n      payload: JSON.stringify(signaturePayload),\n      protected: protectedHeaderBase64,\n    };\n    await flattenedVerify(jws, publicKey);\n    reply.status(200).send();\n  } catch (err) {\n    if (err.code === errors.JWSSignatureVerificationFailed.code) {\n      reply.status(UNAUTHORIZED).send(err);\n      return;\n    }\n    reply.status(INTERNAL_SERVER_ERROR).send();\n  }\n});\n// Run the server!\ntry {\n  await app.listen({ port: 3000 })\n  console.log('Server start http://localhost:3000')\n} catch (err) {\n  app.log.error(err)\n  process.exit(1)\n}\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);