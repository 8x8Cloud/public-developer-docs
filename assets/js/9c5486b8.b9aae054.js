"use strict";(self.webpackChunk_8x8_developer_docs=self.webpackChunk_8x8_developer_docs||[]).push([[85164],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var c=i(96540);const l={},o=c.createContext(l);function s(e){const n=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),c.createElement(o.Provider,{value:n},e.children)}},44437:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"connect/docs/using-the-sdk","title":"Using the Android SDK","description":"Using the SDK","source":"@site/docs/connect/docs/using-the-sdk.md","sourceDirName":"connect/docs","slug":"/connect/docs/using-the-sdk","permalink":"/connect/docs/using-the-sdk","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebarConnectDocs","previous":{"title":"Android - Integrating the SDK","permalink":"/connect/docs/android-integrating-the-sdk"},"next":{"title":"API Specification - Android","permalink":"/connect/docs/api-specification-android"}}');var l=i(74848),o=i(28453);const s={},t="Using the Android SDK",r={},a=[{value:"Using the SDK",id:"using-the-sdk",level:2},{value:"Initialize the SDK",id:"initialize-the-sdk",level:2},{value:"Collect log information from the SDK",id:"collect-log-information-from-the-sdk",level:2},{value:"Register and Activate a Voice User",id:"register-and-activate-a-voice-user",level:2},{value:"SDK state",id:"sdk-state",level:2},{value:"Request runtime permissions",id:"request-runtime-permissions",level:2},{value:"Place a call",id:"place-a-call",level:2},{value:"Mid-call features",id:"mid-call-features",level:2},{value:"Call updates",id:"call-updates",level:2},{value:"Receive a call",id:"receive-a-call",level:2},{value:"Update contact information",id:"update-contact-information",level:2},{value:"Audio control",id:"audio-control",level:2},{value:"Update push notification token and phone number",id:"update-push-notification-token-and-phone-number",level:2},{value:"Unregister and Deactivate Voice User",id:"unregister-and-deactivate-voice-user",level:2},{value:"Proguard Rules",id:"proguard-rules",level:2},{value:"Shared Preferences",id:"shared-preferences",level:2},{value:"Android 11 (API level 30) and lower",id:"android-11-api-level-30-and-lower",level:3},{value:"Android 12 (API level 31) and higher",id:"android-12-api-level-31-and-higher",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"using-the-android-sdk",children:"Using the Android SDK"})}),"\n",(0,l.jsx)(n.h2,{id:"using-the-sdk",children:"Using the SDK"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#initialize-the-sdk",children:"Initialize the SDK"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#register-and-activate-a-voice-user",children:"Register Voice User"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#sdk-state",children:"SDK state"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#request-runtime-permissions",children:"Request runtime permissions"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#place-a-call",children:"Place a call"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#mid-call-features",children:"Mid-call features"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#call-updates",children:"Call updates"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#receive-a-call",children:"Receive a Call"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#update-contact-information",children:"Update contact information"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#audio-control",children:"Audio control"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#update-push-notification-token-and-phone-number",children:"Update push token and phone number"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#unregister-and-deactivate-voice-user",children:"Unregister Voice User"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#proguard-rules",children:"Proguard Rules"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#shared-preferences",children:"Shared Preferences"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"initialize-the-sdk",children:"Initialize the SDK"}),"\n",(0,l.jsxs)(n.p,{children:["To initialize the Voice SDK add the following in the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"onCreate"})})," function of your Activities and Services classes that need to use the Voice SDK APIs."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"class MyService: LifecycleService() {\n\n   ...\n   val voice by lazy { Voice.getInstance() }\n\n   override fun onCreate() {\n      super.onCreate()\n      voice.init(application)\n      ...\n   }\n   ...\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"collect-log-information-from-the-sdk",children:"Collect log information from the SDK"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"lifecycleScope.launch {\n    voice.loggedData.collect { voiceLog ->\n        // Process received log\n    }\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"The Voice SDK sends log information to the application."}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," References to Voice in this document pertain to the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"voice"})})," object."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"register-and-activate-a-voice-user",children:"Register and Activate a Voice User"}),"\n",(0,l.jsx)(n.p,{children:"In order for the Voice SDK to function correctly, you need to add Voice user information to make and receive calls. Use the following for user data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'val userConfiguration = userConfiguration {\n    accountId = "YOUR_ACCOUNT_ID"\n    userId = "YOUR_USER_ID"\n    msisdn = "YOUR_DEVICE_NUMBER"\n    jwtToken = "YOUR_JWT_TOKEN"\n    displayName = "YOUR_NAME"\n    deviceId = "UNIQUE_DEVICE_IDENTIFIER"\n}\n\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Note:"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:["*",(0,l.jsx)(n.code,{children:"msisdn"})]})," is optional."]}),"\n",(0,l.jsxs)(n.p,{children:["*The ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"deviceId"})})," is the device unique identifier, preferably FirebaseInstanceId. Please refer to ",(0,l.jsx)(n.a,{href:"https://developer.android.com/training/articles/user-data-ids#instance-ids-guids",children:"Work with instance IDs and GUIDs"})," for more information."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The Voice SDK also requires application information in the setup. Use the following for application data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'val sessionConfiguration = sessionConfiguration {\n    applicationId = BuildConfig.APPLICATION_ID\n    baseUrl = "VOICE_BASE_URL"\n    pushToken = "YOUR_PUSH_TOKEN"\n}\n\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," The Voice URL is provided by the console when you request access to the Voice SDK."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Once you have the configurations ready, use them to activate the Voice SDK. For example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"configuration {\n    userConfiguration = userConfig\n    sessionConfiguration = sessionConfig\n}\ntry {\n  voice.activate(configuration)\n  saveUserDataToPreference(userConfiguration)\n} catch(e: RegistrationException) {\n    // Log the error\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"Upon activation, the application is ready to make and receive calls."}),"\n",(0,l.jsx)(n.p,{children:"To check if the user is registered and activated, use"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"voice.isActivated()\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Use the result of this function to determine whether or not the user requires activation."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"sdk-state",children:"SDK state"}),"\n",(0,l.jsxs)(n.p,{children:["The Voice SDK allows you to get updates about sdk ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"state"})}),". You can collect it using the following ",(0,l.jsx)(n.code,{children:"StateFlow"})," object:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"lifecycleScope.launch {\n  voice.state.collect { state ->\n    // Handle the state\n  }\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"request-runtime-permissions",children:"Request runtime permissions"}),"\n",(0,l.jsxs)(n.p,{children:["The Voice SDK requires access to ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"READ_PHONE_STATE"})})," and ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"RECORD_AUDIO"})})," permissions in order to successfully place and receive calls. Apps targeting API level 31 or above will additionally need ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"READ_PHONE_NUMBERS"})})," permission. If you attempt to place or accept a call without the necessary permissions granted, one of the following exceptions will be delivered in the ",(0,l.jsx)(n.code,{children:"VoiceCallResult"}),": ",(0,l.jsx)(n.code,{children:"RTCException.PhoneAndMicPermissionDeniedException"}),", ",(0,l.jsx)(n.code,{children:"RTCException.PhonePermissionDeniedException"})," or ",(0,l.jsx)(n.code,{children:"RTCException.MicPermissionDeniedException"})]}),"\n",(0,l.jsx)(n.h2,{id:"place-a-call",children:"Place a call"}),"\n",(0,l.jsxs)(n.p,{children:["In order to place a call, the Voice SDK requires the callee contact information. Use the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"VoiceContact"})})," object from the Voice SDK to create the callee information."]}),"\n",(0,l.jsxs)(n.p,{children:["Once the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"contact"})})," object is ready you can place a call using the following:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"when(val voiceCallResult = voice.placeCall(contact)) {\n    is VoiceCallResult.Success -> { /* handle the call */ }\n    is VoiceCallResult.Failure -> { /* handle the error */ }\n}\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," When the necessary ",(0,l.jsx)(n.a,{href:"#request-runtime-permissions",children:"Permissions"})," are not provided, placing a call will fail with a ",(0,l.jsx)(n.code,{children:"PermissionNotGranted"})," exception."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"mid-call-features",children:"Mid-call features"}),"\n",(0,l.jsxs)(n.p,{children:["The Voice SDK provides APIs to interact with an active ",(0,l.jsx)(n.code,{children:"VoiceCall"}),". These actions are:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"accept()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"reject()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"endAndAccept()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"hangup()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"mute()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"unmute()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"hold()"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"resume()"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["You can also query the state of incoming calls such as ",(0,l.jsx)(n.code,{children:"isIncoming"}),", ",(0,l.jsx)(n.code,{children:"isPeerOnHold"}),", ",(0,l.jsx)(n.code,{children:"isMuted"}),", and ",(0,l.jsx)(n.code,{children:"callStartTime"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["The Voice SDK allows a user to have a second incoming call while a call is in progress. Updates are available via ",(0,l.jsx)(n.code,{children:"voice.voiceCallState"}),", which has the type of ",(0,l.jsx)(n.code,{children:"SharedFlow\\<VoiceCallState\\>"}),". The Voice SDK provides functionality to end the ongoing call and accept an incoming call using the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"endAndAccept"})})," action. The default ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"accept"})})," behavior is to put the ongoing call on hold and accept the incoming call."]}),"\n",(0,l.jsx)(n.h2,{id:"call-updates",children:"Call updates"}),"\n",(0,l.jsxs)(n.p,{children:["In order to receive call updates use ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"voice.voiceCallState"})})," which delivers a ",(0,l.jsx)(n.code,{children:"VoiceCallState"})," object:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"voice.voiceCallState.collect { voiceCallState ->\n  when(voiceCallState) {\n    is VoiceCallState.Added -> {\n        // Call recently added\n    }\n    is VoiceCallState.Failed -> {\n      // Call that failed with an exception.\n    }\n    is VoiceCallState.HoldUpdated -> {\n      // Call that has been moved on hold because of accepting another incoming call.\n    }\n    is VoiceCallState.Removed -> {\n        // Call failed or finished.\n    }\n    is VoiceCallState.Updated -> {\n        // Call that's recently updated.    \n    }\n  }\n    \n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"receive-a-call",children:"Receive a call"}),"\n",(0,l.jsxs)(n.p,{children:["The application needs to receive push notifications via FCM. If you are not using FCM on your project refer to ",(0,l.jsx)(n.a,{href:"https://firebase.google.com/docs/cloud-messaging/android/client",children:"this Firebase topic"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["The application receives a push notification via the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"FirebaseMessagingService"})})," object as an indication of an incoming call. Once the application receives the push notification, it needs to check if the notification is for an incoming call. Use:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"val isVoiceNotification = voice.isVoiceNotification(data)\n\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If the notification is for an incoming call, it is passed along with its context to the Voice SDK. To process an incoming call the Voice SDK starts a ",(0,l.jsx)(n.a,{href:"https://developer.android.com/guide/components/services#Foreground",children:"Foreground Service"})," which requires a notification to be displayed by the application. The notification is displayed for a very short time and may display text such as ",(0,l.jsx)(n.strong,{children:"Incoming call"}),". This notification can be replaced by another notification with ",(0,l.jsx)(n.strong,{children:"Accept"})," and ",(0,l.jsx)(n.strong,{children:"Reject"})," actions as soon as updates are received."]}),"\n",(0,l.jsx)(n.p,{children:"If you wish to present a view as soon as the incoming call is connected, use:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"voice.callActions.collect {  callAction ->\n  when(callAction) {\n    CallAction.PRESENT_INCOMING_CALL -> {\n      // Show UI to present the incoming call to the user\n    }\n    CallAction.MUTE_INCOMING_CALL -> {\n      // Call the API to mute the ringing\n    }\n  }\n}\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Start the collection before the ",(0,l.jsx)(n.code,{children:"receiveCall"})," in order to present your notification or view."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Once the notification is ready, use the following:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"when(val callResult = voice.receiveCall(data, notification)) {\n  is VoiceCallResult.Failure -> {\n      // Handle the error\n  }\n  is VoiceCallResult.Success -> {\n      // Handle the success\n  }\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"update-contact-information",children:"Update contact information"}),"\n",(0,l.jsx)(n.p,{children:"For any active call, you can update the contact information by using the following:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:'val contact = VoiceContact("CONTACT_ID", "CONTACT_NAME", "CONTACT_AVATAR_URL", "CONTACT_PHONE_NUMBER")\nvoice.updateContact(call.uuid, contact)\n\n \n\n'})}),"\n",(0,l.jsx)(n.h2,{id:"audio-control",children:"Audio control"}),"\n",(0,l.jsx)(n.p,{children:"The Voice SDK allows you to switch your audio output during a call by using the following:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"voice.setVoiceAudioOption(audioOption)\n\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In order to receive audio updates collect ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"callAudioOptionUpdates"})})," passes on ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"VoiceCallAudioOption"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"lifecycleScope.launch {\n  voice.callAudioOptionUpdates.collect { voiceCallAudioOption ->\n    // Handle audio option\n  }\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"The SDK allows you to easily toggle between audio options. It follows the following:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.EARPIECE"})," to ",(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.SPEAKER"}),","]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.SPEAKER"})," to ",(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.EARPIECE"}),","]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.BLUETOOTH"})," to ",(0,l.jsx)(n.code,{children:"VoiceCallAudioOption.EARPIECE"})]}),"\n",(0,l.jsx)(n.p,{children:"To toggle between audio options use:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"voice.toggleAudioOption()\n\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"audioOption"})})," is of the type ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"VoiceCallAudioOption"})})," which consists of the values of ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"BLUETOOTH"})}),", ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"SPEAKER"})}),", and ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"EARPIECE"})}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"update-push-notification-token-and-phone-number",children:"Update push notification token and phone number"}),"\n",(0,l.jsx)(n.p,{children:"After registration the push token and phone number that are provided during activation can be reconfigured."}),"\n",(0,l.jsxs)(n.p,{children:["To update the push token, add the following to the class which extends ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"FirebaseMessagingService"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"override fun onNewToken(token: String) {\n    super.onNewToken(token)\n    ...\n    when(val result = voice.updatePushToken(token)) {\n        is ResultWrapper.Success -> {/* Handle success */ }\n        is ResultWrapper.Error -> { /* Handle error */ }\n    }\n}\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"To update the phone number, use the following:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"when(val result = voice.updatePhoneNumber(phoneNumber)) {\n    is ResultWrapper.Success -> {/* Handle success */ }\n    is ResultWrapper.Error -> { /* Handle error */ }\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"unregister-and-deactivate-voice-user",children:"Unregister and Deactivate Voice User"}),"\n",(0,l.jsx)(n.p,{children:"To deactivate or unregister a user, use the following method:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-kotlin",children:"lifecycleScope.launch {\n      voice.deactivate()\n}\n\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"proguard-rules",children:"Proguard Rules"}),"\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"minifyEnabled"})," is set to ",(0,l.jsx)(n.code,{children:"true"})," in your application:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Add the following in your ",(0,l.jsx)(n.code,{children:"proguard-rules.pro"})," file:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"#noinspection ShrinkerUnresolvedReference\n-keep class com.eght.voice.sdk.** { *; }\n-keep class com.eght.sip.** { *; }\n-keep class com.eght.call.** { *; }\n\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["If the compiler complains about ",(0,l.jsx)(n.code,{children:"META-INF/*"})," file collision after adding the proguard rules, you must add the following to your ",(0,l.jsx)(n.strong,{children:"app-level"})," ",(0,l.jsx)(n.code,{children:"build.gradle"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"android {\n\n   ...\n\n   packagingOptions {\n      pickFirst  '**'\n   }\n}\n\n"})}),"\n",(0,l.jsx)(n.h2,{id:"shared-preferences",children:"Shared Preferences"}),"\n",(0,l.jsxs)(n.p,{children:["In order to persist data, it is recommended that the Voice SDK is excluded from ",(0,l.jsx)(n.a,{href:"https://developer.android.com/guide/topics/manifest/application-element#allowbackup",children:"allowBackup"}),". If your application needs the attribute ",(0,l.jsx)(n.code,{children:'android:allowBackup="true"'})," in your ",(0,l.jsx)(n.code,{children:"AndroidManifest.xml"})," file, we recommend doing the following:"]}),"\n",(0,l.jsx)(n.h3,{id:"android-11-api-level-30-and-lower",children:"Android 11 (API level 30) and lower"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Create an ",(0,l.jsx)(n.code,{children:"xml"})," file under the ",(0,l.jsx)(n.code,{children:"xml"})," resource directory. We'll call it ",(0,l.jsx)(n.code,{children:"backup_rules.xml"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n\\<full-backup-content\\>\n    <exclude domain="sharedpref" path="voice-sdk-preferences.xml"/>\n    <exclude domain="sharedpref" path="rtcData.xml"/>\n</full-backup-content>\n\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Add the following attribute to your ",(0,l.jsx)(n.code,{children:"AndroidManifest.xml"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'\\<application\n  android:fullBackupContent="@xml/backup_rules"\n  ... \\>\n  ...\n</application>\n\n'})}),"\n",(0,l.jsx)(n.h3,{id:"android-12-api-level-31-and-higher",children:"Android 12 (API level 31) and higher"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Create an ",(0,l.jsx)(n.code,{children:"xml"})," file under the ",(0,l.jsx)(n.code,{children:"xml"})," resource directory. We'll call it ",(0,l.jsx)(n.code,{children:"data_extraction_rules.xml"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n\\<data-extraction-rules\\>\n  \\<cloud-backup\\>\n    ...\n    <exclude domain="sharedpref" path="voice-sdk-preferences.xml"/>\n    <exclude domain="sharedpref" path="rtcData.xml"/>\n    ...\n  </cloud-backup>\n\n  \\<device-transfer\\>\n    ...\n    <exclude domain="sharedpref" path="voice-sdk-preferences.xml"/>\n    <exclude domain="sharedpref" path="rtcData.xml"/>\n    ...\n  </device-transfer>\n</data-extraction-rules>  \n\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Add the following attribute to your ",(0,l.jsx)(n.code,{children:"AndroidManifest.xml"}),":"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'\\<application\n  android:dataExtractionRules="@xml/data_extraction_rules"\n  ... \\>\n  ...\n</application>\n\n'})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," The approaches must be combined for devices that are targeting API 31+ but have the minimum SDK set to a lower value."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," If you have ",(0,l.jsx)(n.code,{children:'android:allowBackup="false"'}),", you do not need to add this file nor add the ",(0,l.jsx)(n.code,{children:"fullBackupContent"})," and/or ",(0,l.jsx)(n.code,{children:"dataExtractionRules"})," attribute(s)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);